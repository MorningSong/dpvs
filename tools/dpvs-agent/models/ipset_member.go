// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpsetMember IpsetMember represents a specific entry in ipset.
//
// swagger:model IpsetMember
type IpsetMember struct {

	// comment
	// Max Length: 32
	// Min Length: 1
	Comment string `json:"Comment,omitempty"`

	// type specific entry data, for example
	// * 192.168.1.0/29 (bitmap:ip)
	// * 192.168.88.0/24,tcp:8080-8082 (hash:net)
	// * 2001::1,8080-8082,2002::aaaa:bbbb:ccc0:0/108 (hash:ip,port,net)
	//
	// Required: true
	Entry *string `json:"Entry"`

	// options
	Options *IpsetOption `json:"Options,omitempty"`
}

// Validate validates this ipset member
func (m *IpsetMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpsetMember) validateComment(formats strfmt.Registry) error {
	if swag.IsZero(m.Comment) { // not required
		return nil
	}

	if err := validate.MinLength("Comment", "body", m.Comment, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Comment", "body", m.Comment, 32); err != nil {
		return err
	}

	return nil
}

func (m *IpsetMember) validateEntry(formats strfmt.Registry) error {

	if err := validate.Required("Entry", "body", m.Entry); err != nil {
		return err
	}

	return nil
}

func (m *IpsetMember) validateOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Options")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ipset member based on the context it is used
func (m *IpsetMember) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpsetMember) contextValidateOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.Options != nil {
		if err := m.Options.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Options")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Options")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpsetMember) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpsetMember) UnmarshalBinary(b []byte) error {
	var res IpsetMember
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
