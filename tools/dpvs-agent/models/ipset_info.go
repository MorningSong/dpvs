// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IpsetInfo IpsetInfo contains all parameters and information for ipset operations.
//
// swagger:model IpsetInfo
type IpsetInfo struct {

	// creation options
	CreationOptions *IpsetCreationOption `json:"CreationOptions,omitempty"`

	// entries
	Entries []*IpsetMember `json:"Entries"`

	// name
	// Required: true
	// Max Length: 32
	// Min Length: 1
	Name *string `json:"Name"`

	// opertaion type code
	// Enum: [1 2 3 4 5 6 7]
	Opcode uint16 `json:"Opcode,omitempty"`

	// type
	// Required: true
	Type *IpsetType `json:"Type"`
}

// Validate validates this ipset info
func (m *IpsetInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpcode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpsetInfo) validateCreationOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.CreationOptions) { // not required
		return nil
	}

	if m.CreationOptions != nil {
		if err := m.CreationOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CreationOptions")
			}
			return err
		}
	}

	return nil
}

func (m *IpsetInfo) validateEntries(formats strfmt.Registry) error {
	if swag.IsZero(m.Entries) { // not required
		return nil
	}

	for i := 0; i < len(m.Entries); i++ {
		if swag.IsZero(m.Entries[i]) { // not required
			continue
		}

		if m.Entries[i] != nil {
			if err := m.Entries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Entries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IpsetInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("Name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 32); err != nil {
		return err
	}

	return nil
}

var ipsetInfoTypeOpcodePropEnum []interface{}

func init() {
	var res []uint16
	if err := json.Unmarshal([]byte(`[1,2,3,4,5,6,7]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipsetInfoTypeOpcodePropEnum = append(ipsetInfoTypeOpcodePropEnum, v)
	}
}

// prop value enum
func (m *IpsetInfo) validateOpcodeEnum(path, location string, value uint16) error {
	if err := validate.EnumCase(path, location, value, ipsetInfoTypeOpcodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IpsetInfo) validateOpcode(formats strfmt.Registry) error {
	if swag.IsZero(m.Opcode) { // not required
		return nil
	}

	// value enum
	if err := m.validateOpcodeEnum("Opcode", "body", m.Opcode); err != nil {
		return err
	}

	return nil
}

func (m *IpsetInfo) validateType(formats strfmt.Registry) error {

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	if m.Type != nil {
		if err := m.Type.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ipset info based on the context it is used
func (m *IpsetInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreationOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEntries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpsetInfo) contextValidateCreationOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.CreationOptions != nil {
		if err := m.CreationOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreationOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CreationOptions")
			}
			return err
		}
	}

	return nil
}

func (m *IpsetInfo) contextValidateEntries(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Entries); i++ {

		if m.Entries[i] != nil {
			if err := m.Entries[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Entries" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IpsetInfo) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if m.Type != nil {
		if err := m.Type.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Type")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Type")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpsetInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpsetInfo) UnmarshalBinary(b []byte) error {
	var res IpsetInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
