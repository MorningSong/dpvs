// Code generated by go-swagger; DO NOT EDIT.

package ipset

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// DelMemberOKCode is the HTTP code returned for type DelMemberOK
const DelMemberOKCode int = 200

/*
DelMemberOK Succeed

swagger:response delMemberOK
*/
type DelMemberOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDelMemberOK creates DelMemberOK with default headers values
func NewDelMemberOK() *DelMemberOK {

	return &DelMemberOK{}
}

// WithPayload adds the payload to the del member o k response
func (o *DelMemberOK) WithPayload(payload string) *DelMemberOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the del member o k response
func (o *DelMemberOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DelMemberOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DelMemberBadRequestCode is the HTTP code returned for type DelMemberBadRequest
const DelMemberBadRequestCode int = 400

/*
DelMemberBadRequest Invalid ipset parameter

swagger:response delMemberBadRequest
*/
type DelMemberBadRequest struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDelMemberBadRequest creates DelMemberBadRequest with default headers values
func NewDelMemberBadRequest() *DelMemberBadRequest {

	return &DelMemberBadRequest{}
}

// WithPayload adds the payload to the del member bad request response
func (o *DelMemberBadRequest) WithPayload(payload string) *DelMemberBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the del member bad request response
func (o *DelMemberBadRequest) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DelMemberBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DelMemberNotFoundCode is the HTTP code returned for type DelMemberNotFound
const DelMemberNotFoundCode int = 404

/*
DelMemberNotFound Ipset not found

swagger:response delMemberNotFound
*/
type DelMemberNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDelMemberNotFound creates DelMemberNotFound with default headers values
func NewDelMemberNotFound() *DelMemberNotFound {

	return &DelMemberNotFound{}
}

// WithPayload adds the payload to the del member not found response
func (o *DelMemberNotFound) WithPayload(payload string) *DelMemberNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the del member not found response
func (o *DelMemberNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DelMemberNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DelMemberFailureCode is the HTTP code returned for type DelMemberFailure
const DelMemberFailureCode int = 500

/*
DelMemberFailure Service not available

swagger:response delMemberFailure
*/
type DelMemberFailure struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewDelMemberFailure creates DelMemberFailure with default headers values
func NewDelMemberFailure() *DelMemberFailure {

	return &DelMemberFailure{}
}

// WithPayload adds the payload to the del member failure response
func (o *DelMemberFailure) WithPayload(payload string) *DelMemberFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the del member failure response
func (o *DelMemberFailure) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DelMemberFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
