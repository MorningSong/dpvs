// Code generated by go-swagger; DO NOT EDIT.

package ipset

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/dpvs-agent/models"
)

// GetAllOKCode is the HTTP code returned for type GetAllOK
const GetAllOKCode int = 200

/*
GetAllOK Success

swagger:response getAllOK
*/
type GetAllOK struct {

	/*
	  In: Body
	*/
	Payload *models.IpsetInfoArray `json:"body,omitempty"`
}

// NewGetAllOK creates GetAllOK with default headers values
func NewGetAllOK() *GetAllOK {

	return &GetAllOK{}
}

// WithPayload adds the payload to the get all o k response
func (o *GetAllOK) WithPayload(payload *models.IpsetInfoArray) *GetAllOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all o k response
func (o *GetAllOK) SetPayload(payload *models.IpsetInfoArray) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllFailureCode is the HTTP code returned for type GetAllFailure
const GetAllFailureCode int = 500

/*
GetAllFailure Service not available

swagger:response getAllFailure
*/
type GetAllFailure struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetAllFailure creates GetAllFailure with default headers values
func NewGetAllFailure() *GetAllFailure {

	return &GetAllFailure{}
}

// WithPayload adds the payload to the get all failure response
func (o *GetAllFailure) WithPayload(payload string) *GetAllFailure {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all failure response
func (o *GetAllFailure) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllFailure) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
